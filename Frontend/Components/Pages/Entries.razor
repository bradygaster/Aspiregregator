@page "/entries/{Slug}"
@rendermode InteractiveServer
@inject ISourceProvider sourceProvider
@inject EntriesPageViewModel viewModel
@attribute [StreamRendering]

<PageTitle>Entries for @viewModel.SelectedSource?.Name</PageTitle>

@if (viewModel.SelectedSource is null)
{
    <p><em>Loading...</em></p>
    <FluentProgressRing Width="64px"
    Stroke="ProgressStroke.Normal"
    Color="@(Color.Accent.ToString())" />
}
else
{
    <PageTitle>No source selected</PageTitle>
}

@if (viewModel.SelectedSource is not null)
{
    <h1>Entries for @viewModel.SelectedSource?.Name</h1>
    <p>Here are the entries for the source @viewModel.SelectedSource?.Name.</p>

    <FluentGrid AdaptiveRendering="true">
        @foreach (var item in viewModel.SelectedSource!.MostRecentItems)
        {
            <FluentCard Width="400px" Height="400px" style="margin: 10px;">

                <FluentStack Orientation="Orientation.Vertical"
                HorizontalAlignment="HorizontalAlignment.Left"
                VerticalAlignment="VerticalAlignment.Top">
                    @if (item.Image is not null && CleanImageUrl(item.Image.AbsoluteUri) is not null)
                    {
                        <Image Source="@item.Image.AbsoluteUri" AltText=@($"Image: {item.Image.AbsoluteUri}") />
                    }
                    <div style="font-style: italic; font-size: .95em;text-transform: uppercase;color: var(--accent-foreground-active)">
                        @item.GetDisplayDate().Humanize()
                    </div>
                    <div style="text-decoration: none; font-weight: bold; font-size: 1.2em;">
                        <a target="_blank" href="@item.Link">@item.Title</a>
                    </div>
                    <div>@item.GetTrimmedDescription(255)</div>
                </FluentStack>

            </FluentCard>
        }
    </FluentGrid>
}
else
{
    <PageTitle>No source selected</PageTitle>
}

@code {

    [Parameter]
    public string? Slug { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            await viewModel.SelectSource(Slug);
        }
    }

    private string? CleanImageUrl(string originalUrl)
    {
        // todo: monitor image display bugs and use this method to clean the absolute uris
        if(originalUrl.EndsWith("mp4")) return null;
        else return originalUrl;
    }
}
