@page "/"
@using Humanizer
@using Aspiregregator.Frontend.ViewModels
@rendermode InteractiveServer
@implements IDisposable
@inject ISourceProvider SourceProvider
@inject HomePageViewModel viewModel
@inject AppState State

<PageTitle>Aspiregregator</PageTitle>

<h1>Recent Updates</h1>
<p>Here is a list of recent updates across your feeds.</p>
<FluentDataGrid Items="@viewModel?.EntryItems" TGridItem="EntryItemViewModel" ResizableColumns="true">
    <TemplateColumn TGridItem="EntryItemViewModel" Width="10%" Title="Updated">
        <div>@context.DisplayDate.Humanize()</div>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.Source)" Sortable="false" Width="25%" />
    <TemplateColumn TGridItem="EntryItemViewModel" Title="Title">
        <a target="_blank" href="@context.Link">@context.Title</a>
    </TemplateColumn>
</FluentDataGrid>
<FluentButton IconStart="@(new Icons.Regular.Size20.ArrowDown())"
              Appearance="Appearance.Accent"
              Class="mx-05 mr-05"
              OnClick=@LoadMore>More</FluentButton>
<FluentButton IconStart="@(new Icons.Regular.Size20.ArrowUp())"
              Appearance="Appearance.Accent"
              Class="mx-05 mr-05"
              OnClick=@LoadLess>Less</FluentButton>
@code
{
    protected async Task LoadMore()
    {
        viewModel.PageSize += 10;
        await GetSourcesAsync();
    }

    protected async Task LoadLess()
    {
        if (viewModel.PageSize >= 20)
        {
            viewModel.PageSize -= 10;
            await GetSourcesAsync();
        } 
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSourcesAsync();

        State.StateChanged += async () => await GetSourcesAsync();
    }

    public void Dispose()
    {
        State.StateChanged -= async () => await GetSourcesAsync();
    }

    internal async Task GetSourcesAsync()
    {
        await viewModel.RefreshAsync();
        await InvokeAsync(StateHasChanged);
    }
}
